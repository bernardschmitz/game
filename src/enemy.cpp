
#include <iostream>

#include "enemy.h"
#include "player.h"
#include "random.h"

#define MOVING      0
#define TRACKING    1
#define TARGET      2



Enemy::Enemy(vector3 p) : Actor(ACT_ENEMY, "Enemy", p) { 

   //can turn once a frame
   angular_vel.set(0.0, 0.0, degToRad(90.0/50.0));

   w_spd = 180.0;
   v_spd = 0.5;
   v_acc = 750 + uniform_random_float(-50.0, 50.0);

   mass = 10.0 + uniform_random_float(-4.0, 10.0);

   radius = 0.1 + uniform_random_float(0.1, 0.9);

   radius = 1.0;

   mass = 1.0 * radius;

   inv_mass = 1.0/mass;

   life = 20;

   collision_flags = ACT_ENEMY | ACT_BULLET | ACT_PLAYER;

   max_speed = 5; //30;
   max_force = 5000;

   velocity.x = uniform_random_float(-1.0f, 1.0f);
   velocity.y = uniform_random_float(-1.0f, 1.0f);
   velocity.z = 0.0f;

//   velocity = (!velocity) * max_speed/100;

   velocity = vector3(0,0,0);

   rot.set(0.0, 0.0, 0.0, 1.0);

   position = p;

   look_ahead = max_speed*0.15;

   target_pos = vector3( uniform_random_float(-40.0, 40.0), uniform_random_float(-40.0, 40.0), -10.0 );

   //sgMakeIdentQuat(rot);

   delay = 1;
   state = TARGET;

   pain = !(target_pos + vector3(40, 40, 10+uniform_random_float(0.0, 40.0)));

   //pain = vector3(1,1,0);


   dl_enemy = glGenLists(1);


   glNewList(dl_enemy, GL_COMPILE);
   glBegin(GL_TRIANGLE_FAN);
    glColor4f(pain.x, pain.y, pain.z, 1.0);
    for(int i=0; i<12; i++) {
       float x = radius*cos(i/12.0*2.0*M_PI);
       float y = radius*sin(i/12.0*2.0*M_PI);
       glVertex3f(x, y, 0.0);
    }
   glEnd();
   glEndList();

   return;

   glNewList(dl_enemy, GL_COMPILE);
 
// Material material
static GLfloat mat_0_diffuse[] = { 0.514286, 0.000000, 0.000000, 1.000000 };
static GLfloat mat_0_ambient[] = { 0.257143, 0.000000, 0.000000, 1.0 };
static GLfloat mat_0_specular[] = { 1.000000, 0.729323, 0.233083, 1.0 };
static GLfloat mat_0_emission[] = { 0.000000, 0.000000, 0.000000, 1.0 };
static GLfloat mat_0_shine = 98.886275;
// Material.001 material
static GLfloat mat_1_diffuse[] = { 0.000000, 0.000000, 0.800000, 1.000000 };
static GLfloat mat_1_ambient[] = { 0.000000, 0.000000, 0.400000, 1.0 };
static GLfloat mat_1_specular[] = { 0.563910, 0.390977, 1.000000, 1.0 };
static GLfloat mat_1_emission[] = { 0.000000, 0.000000, 0.000000, 1.0 };
static GLfloat mat_1_shine = 103.905882;

// Sphere
glBegin(GL_TRIANGLES);
  glNormal3f(0.581022, 0.664006, -0.470648);
 glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_0_diffuse);
 glMaterialfv(GL_FRONT, GL_AMBIENT, mat_0_ambient);
 glMaterialfv(GL_FRONT, GL_SPECULAR, mat_0_specular);
 glMaterialf(GL_FRONT, GL_SHININESS, mat_0_shine);
 glMaterialfv(GL_FRONT, GL_EMISSION, mat_0_emission);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(-0.182361, 0.702066, -0.315858);
  glVertex3f(0.000000, 0.766376, 0.000000);
  glNormal3f(0.472694, 0.582505, -0.661247);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(-0.342727, 0.516891, -0.593620);
  glVertex3f(-0.182361, 0.702066, -0.315858);
  glNormal3f(0.384770, 0.431500, -0.815941);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(-0.461754, 0.233188, -0.799782);
  glVertex3f(-0.342727, 0.516891, -0.593620);
  glNormal3f(0.327568, 0.229301, -0.916581);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(-0.525088, -0.114826, -0.909478);
  glVertex3f(-0.461754, 0.233188, -0.799782);
  glNormal3f(0.307736, 0.000000, -0.951472);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(-0.525088, -0.485174, -0.909478);
  glVertex3f(-0.525088, -0.114826, -0.909478);
  glNormal3f(0.327568, -0.229301, -0.916581);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(-0.461754, -0.833188, -0.799782);
  glVertex3f(-0.525088, -0.485174, -0.909478);
  glNormal3f(0.384770, -0.431499, -0.815942);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(-0.342727, -1.116891, -0.593620);
  glVertex3f(-0.461754, -0.833188, -0.799782);
  glNormal3f(0.472694, -0.582505, -0.661247);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(-0.182361, -1.302065, -0.315859);
  glVertex3f(-0.342727, -1.116891, -0.593620);
  glNormal3f(0.581022, -0.664006, -0.470648);
  glVertex3f(-0.182361, -1.302065, -0.315859);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(-0.000000, -1.366376, 0.000000);
  glNormal3f(-0.172782, -0.979895, -0.099756);
  glVertex3f(-0.000000, -1.366376, 0.000000);
  glVertex3f(-0.364722, -1.302065, -0.000000);
  glVertex3f(-0.182361, -1.302065, -0.315859);
  glNormal3f(-0.172782, 0.979896, -0.099756);
  glVertex3f(-0.182361, 0.702066, -0.315858);
  glVertex3f(-0.364722, 0.702066, 0.000000);
  glVertex3f(0.000000, 0.766376, 0.000000);
  glNormal3f(-0.172782, 0.979896, 0.099756);
  glVertex3f(-0.364722, 0.702066, 0.000000);
  glVertex3f(-0.182361, 0.702066, 0.315859);
  glVertex3f(0.000000, 0.766376, 0.000000);
  glNormal3f(-0.172783, -0.979895, 0.099756);
  glVertex3f(-0.000000, -1.366376, 0.000000);
  glVertex3f(-0.182361, -1.302065, 0.315859);
  glVertex3f(-0.364722, -1.302065, -0.000000);
  glNormal3f(0.000000, -0.979895, 0.199512);
  glVertex3f(-0.000000, -1.366376, 0.000000);
  glVertex3f(0.182361, -1.302065, 0.315859);
  glVertex3f(-0.182361, -1.302065, 0.315859);
  glNormal3f(0.000000, 0.979896, 0.199511);
  glVertex3f(-0.182361, 0.702066, 0.315859);
  glVertex3f(0.182361, 0.702066, 0.315859);
  glVertex3f(0.000000, 0.766376, 0.000000);
  glNormal3f(0.696876, 0.665719, -0.266798);
  glVertex3f(0.182361, 0.702066, 0.315859);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(0.000000, 0.766376, 0.000000);
  glNormal3f(0.806286, 0.586844, -0.074280);
  glVertex3f(0.342727, 0.516891, 0.593620);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(0.182361, 0.702066, 0.315859);
  glNormal3f(0.895868, 0.436433, 0.083354);
  glVertex3f(0.461754, 0.233188, 0.799782);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(0.342727, 0.516891, 0.593620);
  glNormal3f(0.954528, 0.232521, 0.186578);
  glVertex3f(0.525088, -0.114826, 0.909478);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(0.461754, 0.233188, 0.799782);
  glNormal3f(0.974935, 0.000000, 0.222490);
  glVertex3f(0.525088, -0.485174, 0.909478);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(0.525088, -0.114826, 0.909478);
  glNormal3f(0.954528, -0.232521, 0.186578);
  glVertex3f(0.461754, -0.833188, 0.799782);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(0.525088, -0.485174, 0.909478);
  glNormal3f(0.895868, -0.436432, 0.083354);
  glVertex3f(0.342727, -1.116891, 0.593620);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(0.461754, -0.833188, 0.799782);
  glNormal3f(0.806286, -0.586844, -0.074280);
  glVertex3f(0.182361, -1.302065, 0.315859);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(0.342727, -1.116891, 0.593620);
  glNormal3f(0.696876, -0.665719, -0.266798);
  glVertex3f(-0.000000, -1.366376, 0.000000);
  glVertex3f(0.839473, -0.300000, -0.468137);
  glVertex3f(0.182361, -1.302065, 0.315859);
glEnd();

glBegin(GL_QUADS);
  glNormal3f(-0.480384, -0.832050, -0.277350);
 glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_0_diffuse);
 glMaterialfv(GL_FRONT, GL_AMBIENT, mat_0_ambient);
 glMaterialfv(GL_FRONT, GL_SPECULAR, mat_0_specular);
 glMaterialf(GL_FRONT, GL_SHININESS, mat_0_shine);
 glMaterialfv(GL_FRONT, GL_EMISSION, mat_0_emission);
  glVertex3f(-0.182361, -1.302065, -0.315859);
  glVertex3f(-0.364722, -1.302065, -0.000000);
  glVertex3f(-0.685454, -1.116891, -0.000000);
  glVertex3f(-0.342727, -1.116891, -0.593620);
  glNormal3f(-0.700583, -0.587858, -0.404482);
  glVertex3f(-0.342727, -1.116891, -0.593620);
  glVertex3f(-0.685454, -1.116891, -0.000000);
  glVertex3f(-0.923509, -0.833188, -0.000000);
  glVertex3f(-0.461754, -0.833188, -0.799782);
  glNormal3f(-0.825965, -0.300627, -0.476871);
  glVertex3f(-0.461754, -0.833188, -0.799782);
  glVertex3f(-0.923509, -0.833188, -0.000000);
  glVertex3f(-1.050175, -0.485174, 0.000000);
  glVertex3f(-0.525088, -0.485174, -0.909478);
  glNormal3f(-0.866025, 0.000000, -0.500000);
  glVertex3f(-0.525088, -0.485174, -0.909478);
  glVertex3f(-1.050175, -0.485174, 0.000000);
  glVertex3f(-1.050175, -0.114826, 0.000000);
  glVertex3f(-0.525088, -0.114826, -0.909478);
  glNormal3f(-0.825965, 0.300627, -0.476871);
  glVertex3f(-0.525088, -0.114826, -0.909478);
  glVertex3f(-1.050175, -0.114826, 0.000000);
  glVertex3f(-0.923509, 0.233188, 0.000000);
  glVertex3f(-0.461754, 0.233188, -0.799782);
  glNormal3f(-0.700583, 0.587859, -0.404482);
  glVertex3f(-0.461754, 0.233188, -0.799782);
  glVertex3f(-0.923509, 0.233188, 0.000000);
  glVertex3f(-0.685453, 0.516891, 0.000000);
  glVertex3f(-0.342727, 0.516891, -0.593620);
  glNormal3f(-0.480384, 0.832050, -0.277350);
  glVertex3f(-0.342727, 0.516891, -0.593620);
  glVertex3f(-0.685453, 0.516891, 0.000000);
  glVertex3f(-0.364722, 0.702066, 0.000000);
  glVertex3f(-0.182361, 0.702066, -0.315858);
  glNormal3f(-0.480384, 0.832050, 0.277350);
  glVertex3f(-0.685453, 0.516891, 0.000000);
  glVertex3f(-0.342727, 0.516891, 0.593620);
  glVertex3f(-0.182361, 0.702066, 0.315859);
  glVertex3f(-0.364722, 0.702066, 0.000000);
  glNormal3f(-0.700583, 0.587859, 0.404482);
  glVertex3f(-0.923509, 0.233188, 0.000000);
  glVertex3f(-0.461754, 0.233188, 0.799782);
  glVertex3f(-0.342727, 0.516891, 0.593620);
  glVertex3f(-0.685453, 0.516891, 0.000000);
  glNormal3f(-0.825965, 0.300626, 0.476871);
  glVertex3f(-1.050175, -0.114826, 0.000000);
  glVertex3f(-0.525088, -0.114826, 0.909478);
  glVertex3f(-0.461754, 0.233188, 0.799782);
  glVertex3f(-0.923509, 0.233188, 0.000000);
  glNormal3f(-0.866025, 0.000000, 0.500000);
  glVertex3f(-1.050175, -0.485174, 0.000000);
  glVertex3f(-0.525088, -0.485174, 0.909478);
  glVertex3f(-0.525088, -0.114826, 0.909478);
  glVertex3f(-1.050175, -0.114826, 0.000000);
  glNormal3f(-0.825965, -0.300626, 0.476871);
  glVertex3f(-0.923509, -0.833188, -0.000000);
  glVertex3f(-0.461754, -0.833188, 0.799782);
  glVertex3f(-0.525088, -0.485174, 0.909478);
  glVertex3f(-1.050175, -0.485174, 0.000000);
  glNormal3f(-0.700583, -0.587858, 0.404482);
  glVertex3f(-0.685454, -1.116891, -0.000000);
  glVertex3f(-0.342727, -1.116891, 0.593620);
  glVertex3f(-0.461754, -0.833188, 0.799782);
  glVertex3f(-0.923509, -0.833188, -0.000000);
  glNormal3f(-0.480384, -0.832050, 0.277350);
  glVertex3f(-0.364722, -1.302065, -0.000000);
  glVertex3f(-0.182361, -1.302065, 0.315859);
  glVertex3f(-0.342727, -1.116891, 0.593620);
  glVertex3f(-0.685454, -1.116891, -0.000000);
  glNormal3f(0.000000, -0.832050, 0.554700);
  glVertex3f(-0.182361, -1.302065, 0.315859);
  glVertex3f(0.182361, -1.302065, 0.315859);
  glVertex3f(0.342727, -1.116891, 0.593620);
  glVertex3f(-0.342727, -1.116891, 0.593620);
  glNormal3f(0.000000, -0.587858, 0.808964);
  glVertex3f(-0.342727, -1.116891, 0.593620);
  glVertex3f(0.342727, -1.116891, 0.593620);
  glVertex3f(0.461754, -0.833188, 0.799782);
  glVertex3f(-0.461754, -0.833188, 0.799782);
  glNormal3f(0.000000, -0.300626, 0.953742);
  glVertex3f(-0.461754, -0.833188, 0.799782);
  glVertex3f(0.461754, -0.833188, 0.799782);
  glVertex3f(0.525088, -0.485174, 0.909478);
  glVertex3f(-0.525088, -0.485174, 0.909478);
  glNormal3f(0.000000, 0.000000, 1.000000);
  glVertex3f(-0.525088, -0.485174, 0.909478);
  glVertex3f(0.525088, -0.485174, 0.909478);
  glVertex3f(0.525088, -0.114826, 0.909478);
  glVertex3f(-0.525088, -0.114826, 0.909478);
  glNormal3f(0.000000, 0.300626, 0.953742);
  glVertex3f(-0.525088, -0.114826, 0.909478);
  glVertex3f(0.525088, -0.114826, 0.909478);
  glVertex3f(0.461754, 0.233188, 0.799782);
  glVertex3f(-0.461754, 0.233188, 0.799782);
  glNormal3f(0.000000, 0.587859, 0.808964);
  glVertex3f(-0.461754, 0.233188, 0.799782);
  glVertex3f(0.461754, 0.233188, 0.799782);
  glVertex3f(0.342727, 0.516891, 0.593620);
  glVertex3f(-0.342727, 0.516891, 0.593620);
  glNormal3f(-0.000000, 0.832050, 0.554700);
  glVertex3f(-0.342727, 0.516891, 0.593620);
  glVertex3f(0.342727, 0.516891, 0.593620);
  glVertex3f(0.182361, 0.702066, 0.315859);
  glVertex3f(-0.182361, 0.702066, 0.315859);
glEnd();


// Mesh
 glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_1_diffuse);
 glMaterialfv(GL_FRONT, GL_AMBIENT, mat_1_ambient);
 glMaterialfv(GL_FRONT, GL_SPECULAR, mat_1_specular);
 glMaterialf(GL_FRONT, GL_SHININESS, mat_1_shine);
 glMaterialfv(GL_FRONT, GL_EMISSION, mat_1_emission);
glBegin(GL_QUADS);
  glNormal3f(-0.496292, -0.488937, 0.717338);
  glVertex3f(-1.411218, -1.411218, 0.082110);
  glNormal3f(-0.248970, -0.232582, 0.940153);
  glVertex3f(-1.115412, -1.108796, 0.494110);
  glNormal3f(-0.356334, 0.043703, 0.933317);
  glVertex3f(-1.536576, -0.273487, 0.484035);
  glNormal3f(-0.689138, -0.029481, 0.724021);
  glVertex3f(-1.949553, -0.351797, 0.080904);
  glNormal3f(-0.163060, -0.681082, 0.713797);
  glVertex3f(-0.327744, -1.978857, 0.082110);
  glNormal3f(-0.084994, -0.322214, 0.942808);
  glVertex3f(-0.259718, -1.563827, 0.495716);
  glNormal3f(-0.248970, -0.232582, 0.940153);
  glVertex3f(-1.115412, -1.108796, 0.494110);
  glNormal3f(-0.496292, -0.488937, 0.717338);
  glVertex3f(-1.411218, -1.411218, 0.082110);
  glNormal3f(0.163060, -0.681082, 0.713797);
  glVertex3f(0.327744, -1.978857, 0.082110);
  glNormal3f(0.084994, -0.322214, 0.942808);
  glVertex3f(0.259718, -1.563827, 0.495716);
  glNormal3f(-0.084994, -0.322214, 0.942808);
  glVertex3f(-0.259718, -1.563827, 0.495716);
  glNormal3f(-0.163060, -0.681082, 0.713797);
  glVertex3f(-0.327744, -1.978857, 0.082110);
  glNormal3f(0.496292, -0.488937, 0.717338);
  glVertex3f(1.411219, -1.411218, 0.082110);
  glNormal3f(0.248970, -0.232582, 0.940153);
  glVertex3f(1.115412, -1.108795, 0.494110);
  glNormal3f(0.084994, -0.322214, 0.942808);
  glVertex3f(0.259718, -1.563827, 0.495716);
  glNormal3f(0.163060, -0.681082, 0.713797);
  glVertex3f(0.327744, -1.978857, 0.082110);
  glNormal3f(0.689138, -0.029481, 0.724021);
  glVertex3f(1.949553, -0.351796, 0.080904);
  glNormal3f(0.356334, 0.043703, 0.933317);
  glVertex3f(1.536576, -0.273486, 0.484035);
  glNormal3f(0.248970, -0.232582, 0.940153);
  glVertex3f(1.115412, -1.108795, 0.494110);
  glNormal3f(0.496292, -0.488937, 0.717338);
  glVertex3f(1.411219, -1.411218, 0.082110);
  glNormal3f(0.601978, 0.464003, 0.649861);
  glVertex3f(1.759076, 0.138848, 0.072641);
  glNormal3f(0.210395, 0.366558, 0.906278);
  glVertex3f(1.385578, 0.119193, 0.434145);
  glNormal3f(0.356334, 0.043703, 0.933317);
  glVertex3f(1.536576, -0.273486, 0.484035);
  glNormal3f(0.689138, -0.029481, 0.724021);
  glVertex3f(1.949553, -0.351796, 0.080904);
  glNormal3f(0.349528, 0.727653, 0.590167);
  glVertex3f(0.904643, 0.701425, 0.046531);
  glNormal3f(0.040895, 0.382977, 0.922819);
  glVertex3f(0.713833, 0.588167, 0.279292);
  glNormal3f(0.210395, 0.366558, 0.906278);
  glVertex3f(1.385578, 0.119193, 0.434145);
  glNormal3f(0.601978, 0.464003, 0.649861);
  glVertex3f(1.759076, 0.138848, 0.072641);
  glNormal3f(0.116550, 0.730644, 0.672689);
  glVertex3f(0.137267, 0.983562, 0.032220);
  glNormal3f(0.014618, 0.323252, 0.946165);
  glVertex3f(0.108720, 0.824747, 0.194491);
  glNormal3f(0.040895, 0.382977, 0.922819);
  glVertex3f(0.713833, 0.588167, 0.279292);
  glNormal3f(0.349528, 0.727653, 0.590167);
  glVertex3f(0.904643, 0.701425, 0.046531);
  glNormal3f(-0.116550, 0.730644, 0.672689);
  glVertex3f(-0.137267, 0.983562, 0.032220);
  glNormal3f(-0.014618, 0.323252, 0.946165);
  glVertex3f(-0.108720, 0.824747, 0.194491);
  glNormal3f(0.014618, 0.323252, 0.946165);
  glVertex3f(0.108720, 0.824747, 0.194491);
  glNormal3f(0.116550, 0.730644, 0.672689);
  glVertex3f(0.137267, 0.983562, 0.032220);
  glNormal3f(-0.349528, 0.727653, 0.590167);
  glVertex3f(-0.904643, 0.701425, 0.046531);
  glNormal3f(-0.040895, 0.382977, 0.922819);
  glVertex3f(-0.713832, 0.588167, 0.279292);
  glNormal3f(-0.014618, 0.323252, 0.946165);
  glVertex3f(-0.108720, 0.824747, 0.194491);
  glNormal3f(-0.116550, 0.730644, 0.672689);
  glVertex3f(-0.137267, 0.983562, 0.032220);
  glNormal3f(-0.601978, 0.464003, 0.649861);
  glVertex3f(-1.759076, 0.138848, 0.072641);
  glNormal3f(-0.210395, 0.366558, 0.906278);
  glVertex3f(-1.385579, 0.119192, 0.434145);
  glNormal3f(-0.040895, 0.382977, 0.922819);
  glVertex3f(-0.713832, 0.588167, 0.279292);
  glNormal3f(-0.349528, 0.727653, 0.590167);
  glVertex3f(-0.904643, 0.701425, 0.046531);
  glNormal3f(-0.689138, -0.029481, 0.724021);
  glVertex3f(-1.949553, -0.351797, 0.080904);
  glNormal3f(-0.356334, 0.043703, 0.933317);
  glVertex3f(-1.536576, -0.273487, 0.484035);
  glNormal3f(-0.210395, 0.366558, 0.906278);
  glVertex3f(-1.385579, 0.119192, 0.434145);
  glNormal3f(-0.601978, 0.464003, 0.649861);
  glVertex3f(-1.759076, 0.138848, 0.072641);
  glNormal3f(-0.248970, -0.232582, 0.940153);
  glVertex3f(-1.115412, -1.108796, 0.494110);
  glNormal3f(0.454878, 0.330638, 0.826868);
  glVertex3f(-0.713018, -0.517767, 0.324954);
  glNormal3f(0.516770, 0.031709, 0.855525);
  glVertex3f(-0.857252, -0.072777, 0.271434);
  glNormal3f(-0.356334, 0.043703, 0.933317);
  glVertex3f(-1.536576, -0.273487, 0.484035);
  glNormal3f(-0.084994, -0.322214, 0.942808);
  glVertex3f(-0.259718, -1.563827, 0.495716);
  glNormal3f(0.183905, 0.517106, 0.835902);
  glVertex3f(-0.185445, -0.992717, 0.352726);
  glNormal3f(0.454878, 0.330638, 0.826868);
  glVertex3f(-0.713018, -0.517767, 0.324954);
  glNormal3f(-0.248970, -0.232582, 0.940153);
  glVertex3f(-1.115412, -1.108796, 0.494110);
  glNormal3f(0.084994, -0.322214, 0.942808);
  glVertex3f(0.259718, -1.563827, 0.495716);
  glNormal3f(-0.183905, 0.517106, 0.835902);
  glVertex3f(0.185445, -0.992717, 0.352726);
  glNormal3f(0.183905, 0.517106, 0.835902);
  glVertex3f(-0.185445, -0.992717, 0.352726);
  glNormal3f(-0.084994, -0.322214, 0.942808);
  glVertex3f(-0.259718, -1.563827, 0.495716);
  glNormal3f(0.248970, -0.232582, 0.940153);
  glVertex3f(1.115412, -1.108795, 0.494110);
  glNormal3f(-0.454878, 0.330638, 0.826868);
  glVertex3f(0.713018, -0.517767, 0.324954);
  glNormal3f(-0.183905, 0.517106, 0.835902);
  glVertex3f(0.185445, -0.992717, 0.352726);
  glNormal3f(0.084994, -0.322214, 0.942808);
  glVertex3f(0.259718, -1.563827, 0.495716);
  glNormal3f(0.356334, 0.043703, 0.933317);
  glVertex3f(1.536576, -0.273486, 0.484035);
  glNormal3f(-0.516770, 0.031709, 0.855525);
  glVertex3f(0.857252, -0.072777, 0.271434);
  glNormal3f(-0.454878, 0.330638, 0.826868);
  glVertex3f(0.713018, -0.517767, 0.324954);
  glNormal3f(0.248970, -0.232582, 0.940153);
  glVertex3f(1.115412, -1.108795, 0.494110);
  glNormal3f(0.210395, 0.366558, 0.906278);
  glVertex3f(1.385578, 0.119193, 0.434145);
  glNormal3f(-0.533372, -0.281045, 0.797784);
  glVertex3f(0.747834, 0.114256, 0.235855);
  glNormal3f(-0.516770, 0.031709, 0.855525);
  glVertex3f(0.857252, -0.072777, 0.271434);
  glNormal3f(0.356334, 0.043703, 0.933317);
  glVertex3f(1.536576, -0.273486, 0.484035);
  glNormal3f(0.040895, 0.382977, 0.922819);
  glVertex3f(0.713833, 0.588167, 0.279292);
  glNormal3f(-0.463698, -0.435591, 0.771477);
  glVertex3f(0.422021, 0.468882, 0.171757);
  glNormal3f(-0.533372, -0.281045, 0.797784);
  glVertex3f(0.747834, 0.114256, 0.235855);
  glNormal3f(0.210395, 0.366558, 0.906278);
  glVertex3f(1.385578, 0.119193, 0.434145);
  glNormal3f(0.014618, 0.323252, 0.946165);
  glVertex3f(0.108720, 0.824747, 0.194491);
  glNormal3f(-0.205542, -0.634632, 0.744957);
  glVertex3f(0.076027, 0.657482, 0.137908);
  glNormal3f(-0.463698, -0.435591, 0.771477);
  glVertex3f(0.422021, 0.468882, 0.171757);
  glNormal3f(0.040895, 0.382977, 0.922819);
  glVertex3f(0.713833, 0.588167, 0.279292);
  glNormal3f(-0.014618, 0.323252, 0.946165);
  glVertex3f(-0.108720, 0.824747, 0.194491);
  glNormal3f(0.205542, -0.634632, 0.744957);
  glVertex3f(-0.076027, 0.657482, 0.137908);
  glNormal3f(-0.205542, -0.634632, 0.744957);
  glVertex3f(0.076027, 0.657482, 0.137908);
  glNormal3f(0.014618, 0.323252, 0.946165);
  glVertex3f(0.108720, 0.824747, 0.194491);
  glNormal3f(-0.040895, 0.382977, 0.922819);
  glVertex3f(-0.713832, 0.588167, 0.279292);
  glNormal3f(0.463698, -0.435591, 0.771477);
  glVertex3f(-0.422021, 0.468882, 0.171757);
  glNormal3f(0.205542, -0.634632, 0.744957);
  glVertex3f(-0.076027, 0.657482, 0.137908);
  glNormal3f(-0.014618, 0.323252, 0.946165);
  glVertex3f(-0.108720, 0.824747, 0.194491);
  glNormal3f(-0.210395, 0.366558, 0.906278);
  glVertex3f(-1.385579, 0.119192, 0.434145);
  glNormal3f(0.533372, -0.281045, 0.797784);
  glVertex3f(-0.747834, 0.114256, 0.235855);
  glNormal3f(0.463698, -0.435591, 0.771477);
  glVertex3f(-0.422021, 0.468882, 0.171757);
  glNormal3f(-0.040895, 0.382977, 0.922819);
  glVertex3f(-0.713832, 0.588167, 0.279292);
  glNormal3f(-0.356334, 0.043703, 0.933317);
  glVertex3f(-1.536576, -0.273487, 0.484035);
  glNormal3f(0.516770, 0.031709, 0.855525);
  glVertex3f(-0.857252, -0.072777, 0.271434);
  glNormal3f(0.533372, -0.281045, 0.797784);
  glVertex3f(-0.747834, 0.114256, 0.235855);
  glNormal3f(-0.210395, 0.366558, 0.906278);
  glVertex3f(-1.385579, 0.119192, 0.434145);
  glNormal3f(0.454878, 0.330638, 0.826868);
  glVertex3f(-0.713018, -0.517767, 0.324954);
  glNormal3f(0.828822, 0.535417, 0.162297);
  glVertex3f(-0.573185, -0.299397, -0.071357);
  glNormal3f(0.813196, -0.178320, 0.553972);
  glVertex3f(-0.612688, 0.003778, -0.051979);
  glNormal3f(0.516770, 0.031709, 0.855525);
  glVertex3f(-0.857252, -0.072777, 0.271434);
  glNormal3f(0.183905, 0.517106, 0.835902);
  glVertex3f(-0.185445, -0.992717, 0.352726);
  glNormal3f(0.367046, 0.873501, -0.319742);
  glVertex3f(-0.160955, -0.793783, -0.081799);
  glNormal3f(0.828822, 0.535417, 0.162297);
  glVertex3f(-0.573185, -0.299397, -0.071357);
  glNormal3f(0.454878, 0.330638, 0.826868);
  glVertex3f(-0.713018, -0.517767, 0.324954);
  glNormal3f(-0.183905, 0.517106, 0.835902);
  glVertex3f(0.185445, -0.992717, 0.352726);
  glNormal3f(-0.367046, 0.873501, -0.319742);
  glVertex3f(0.160955, -0.793783, -0.081799);
  glNormal3f(0.367046, 0.873501, -0.319742);
  glVertex3f(-0.160955, -0.793783, -0.081799);
  glNormal3f(0.183905, 0.517106, 0.835902);
  glVertex3f(-0.185445, -0.992717, 0.352726);
  glNormal3f(-0.454878, 0.330638, 0.826868);
  glVertex3f(0.713018, -0.517767, 0.324954);
  glNormal3f(-0.828822, 0.535417, 0.162297);
  glVertex3f(0.573185, -0.299397, -0.071357);
  glNormal3f(-0.367046, 0.873501, -0.319742);
  glVertex3f(0.160955, -0.793783, -0.081799);
  glNormal3f(-0.183905, 0.517106, 0.835902);
  glVertex3f(0.185445, -0.992717, 0.352726);
  glNormal3f(-0.516770, 0.031709, 0.855525);
  glVertex3f(0.857252, -0.072777, 0.271434);
  glNormal3f(-0.813196, -0.178320, 0.553972);
  glVertex3f(0.612688, 0.003778, -0.051979);
  glNormal3f(-0.828822, 0.535417, 0.162297);
  glVertex3f(0.573185, -0.299397, -0.071357);
  glNormal3f(-0.454878, 0.330638, 0.826868);
  glVertex3f(0.713018, -0.517767, 0.324954);
  glNormal3f(-0.533372, -0.281045, 0.797784);
  glVertex3f(0.747834, 0.114256, 0.235855);
  glNormal3f(-0.707144, -0.482467, 0.516831);
  glVertex3f(0.516843, 0.114116, -0.043716);
  glNormal3f(-0.813196, -0.178320, 0.553972);
  glVertex3f(0.612688, 0.003778, -0.051979);
  glNormal3f(-0.516770, 0.031709, 0.855525);
  glVertex3f(0.857252, -0.072777, 0.271434);
  glNormal3f(-0.463698, -0.435591, 0.771477);
  glVertex3f(0.422021, 0.468882, 0.171757);
  glNormal3f(-0.597278, -0.675405, 0.432447);
  glVertex3f(0.318284, 0.429945, -0.035778);
  glNormal3f(-0.707144, -0.482467, 0.516831);
  glVertex3f(0.516843, 0.114116, -0.043716);
  glNormal3f(-0.533372, -0.281045, 0.797784);
  glVertex3f(0.747834, 0.114256, 0.235855);
  glNormal3f(-0.205542, -0.634632, 0.744957);
  glVertex3f(0.076027, 0.657482, 0.137908);
  glNormal3f(-0.263100, -0.903104, 0.339305);
  glVertex3f(0.065110, 0.602883, -0.031909);
  glNormal3f(-0.597278, -0.675405, 0.432447);
  glVertex3f(0.318284, 0.429945, -0.035778);
  glNormal3f(-0.463698, -0.435591, 0.771477);
  glVertex3f(0.422021, 0.468882, 0.171757);
  glNormal3f(0.205542, -0.634632, 0.744957);
  glVertex3f(-0.076027, 0.657482, 0.137908);
  glNormal3f(0.263100, -0.903104, 0.339305);
  glVertex3f(-0.065110, 0.602883, -0.031909);
  glNormal3f(-0.263100, -0.903104, 0.339305);
  glVertex3f(0.065110, 0.602883, -0.031909);
  glNormal3f(-0.205542, -0.634632, 0.744957);
  glVertex3f(0.076027, 0.657482, 0.137908);
  glNormal3f(0.463698, -0.435591, 0.771477);
  glVertex3f(-0.422021, 0.468882, 0.171757);
  glNormal3f(0.597278, -0.675405, 0.432447);
  glVertex3f(-0.318285, 0.429945, -0.035778);
  glNormal3f(0.263100, -0.903104, 0.339305);
  glVertex3f(-0.065110, 0.602883, -0.031909);
  glNormal3f(0.205542, -0.634632, 0.744957);
  glVertex3f(-0.076027, 0.657482, 0.137908);
  glNormal3f(0.533372, -0.281045, 0.797784);
  glVertex3f(-0.747834, 0.114256, 0.235855);
  glNormal3f(0.707144, -0.482467, 0.516831);
  glVertex3f(-0.516843, 0.114116, -0.043716);
  glNormal3f(0.597278, -0.675405, 0.432447);
  glVertex3f(-0.318285, 0.429945, -0.035778);
  glNormal3f(0.463698, -0.435591, 0.771477);
  glVertex3f(-0.422021, 0.468882, 0.171757);
  glNormal3f(0.516770, 0.031709, 0.855525);
  glVertex3f(-0.857252, -0.072777, 0.271434);
  glNormal3f(0.813196, -0.178320, 0.553972);
  glVertex3f(-0.612688, 0.003778, -0.051979);
  glNormal3f(0.707144, -0.482467, 0.516831);
  glVertex3f(-0.516843, 0.114116, -0.043716);
  glNormal3f(0.533372, -0.281045, 0.797784);
  glVertex3f(-0.747834, 0.114256, 0.235855);
  glNormal3f(0.367046, 0.873501, -0.319742);
  glVertex3f(-0.160955, -0.793783, -0.081799);
  glNormal3f(0.025849, 0.076937, -0.996673);
  glVertex3f(-0.232094, -1.367552, -0.495405);
  glNormal3f(0.060030, 0.054018, -0.996704);
  glVertex3f(-0.976614, -0.924653, -0.483356);
  glNormal3f(0.828822, 0.535417, 0.162297);
  glVertex3f(-0.573185, -0.299397, -0.071357);
  glNormal3f(-0.367046, 0.873501, -0.319742);
  glVertex3f(0.160955, -0.793783, -0.081799);
  glNormal3f(-0.025849, 0.076937, -0.996673);
  glVertex3f(0.232094, -1.367551, -0.495405);
  glNormal3f(0.025849, 0.076937, -0.996673);
  glVertex3f(-0.232094, -1.367552, -0.495405);
  glNormal3f(0.367046, 0.873501, -0.319742);
  glVertex3f(-0.160955, -0.793783, -0.081799);
  glNormal3f(-0.828822, 0.535417, 0.162297);
  glVertex3f(0.573185, -0.299397, -0.071357);
  glNormal3f(-0.060030, 0.054018, -0.996704);
  glVertex3f(0.976615, -0.924653, -0.483356);
  glNormal3f(-0.025849, 0.076937, -0.996673);
  glVertex3f(0.232094, -1.367551, -0.495405);
  glNormal3f(-0.367046, 0.873501, -0.319742);
  glVertex3f(0.160955, -0.793783, -0.081799);
  glNormal3f(-0.518937, -0.508957, -0.686758);
  glVertex3f(-1.310660, -1.310660, -0.353553);
  glNormal3f(0.060030, 0.054018, -0.996704);
  glVertex3f(-0.976614, -0.924653, -0.483356);
  glNormal3f(0.025849, 0.076937, -0.996673);
  glVertex3f(-0.232094, -1.367552, -0.495405);
  glNormal3f(-0.175878, -0.705588, -0.686422);
  glVertex3f(-0.304390, -1.837851, -0.353553);
  glNormal3f(-0.025849, 0.076937, -0.996673);
  glVertex3f(0.232094, -1.367551, -0.495405);
  glNormal3f(0.175878, -0.705588, -0.686422);
  glVertex3f(0.304390, -1.837850, -0.353553);
  glNormal3f(-0.175878, -0.705588, -0.686422);
  glVertex3f(-0.304390, -1.837851, -0.353553);
  glNormal3f(0.025849, 0.076937, -0.996673);
  glVertex3f(-0.232094, -1.367552, -0.495405);
  glNormal3f(0.175878, -0.705588, -0.686422);
  glVertex3f(0.304390, -1.837850, -0.353553);
  glNormal3f(-0.025849, 0.076937, -0.996673);
  glVertex3f(0.232094, -1.367551, -0.495405);
  glNormal3f(-0.060030, 0.054018, -0.996704);
  glVertex3f(0.976615, -0.924653, -0.483356);
  glNormal3f(0.518937, -0.508957, -0.686758);
  glVertex3f(1.310660, -1.310660, -0.353553);
  glNormal3f(-0.518937, -0.508957, -0.686758);
  glVertex3f(-1.310660, -1.310660, -0.353553);
  glNormal3f(-0.675924, -0.667898, -0.311441);
  glVertex3f(-1.411218, -1.411218, 0.082110);
  glNormal3f(-0.947203, -0.056154, -0.315622);
  glVertex3f(-1.949553, -0.351797, 0.080904);
  glNormal3f(-0.727592, -0.012146, -0.685873);
  glVertex3f(-1.810635, -0.326355, -0.348362);
  glNormal3f(-0.675924, -0.667898, -0.311441);
  glVertex3f(-1.411218, -1.411218, 0.082110);
  glNormal3f(-0.518937, -0.508957, -0.686758);
  glVertex3f(-1.310660, -1.310660, -0.353553);
  glNormal3f(-0.175878, -0.705588, -0.686422);
  glVertex3f(-0.304390, -1.837851, -0.353553);
  glNormal3f(-0.223945, -0.923643, -0.310953);
  glVertex3f(-0.327744, -1.978857, 0.082110);
  glNormal3f(0.175878, -0.705588, -0.686422);
  glVertex3f(0.304390, -1.837850, -0.353553);
  glNormal3f(0.223945, -0.923643, -0.310953);
  glVertex3f(0.327744, -1.978857, 0.082110);
  glNormal3f(-0.223945, -0.923643, -0.310953);
  glVertex3f(-0.327744, -1.978857, 0.082110);
  glNormal3f(-0.175878, -0.705588, -0.686422);
  glVertex3f(-0.304390, -1.837851, -0.353553);
  glNormal3f(0.223945, -0.923643, -0.310953);
  glVertex3f(0.327744, -1.978857, 0.082110);
  glNormal3f(0.175878, -0.705588, -0.686422);
  glVertex3f(0.304390, -1.837850, -0.353553);
  glNormal3f(0.518937, -0.508957, -0.686758);
  glVertex3f(1.310660, -1.310660, -0.353553);
  glNormal3f(0.675924, -0.667898, -0.311441);
  glVertex3f(1.411219, -1.411218, 0.082110);
  glNormal3f(0.727592, -0.012146, -0.685873);
  glVertex3f(1.810635, -0.326354, -0.348362);
  glNormal3f(0.947203, -0.056154, -0.315622);
  glVertex3f(1.949553, -0.351796, 0.080904);
  glNormal3f(0.675924, -0.667898, -0.311441);
  glVertex3f(1.411219, -1.411218, 0.082110);
  glNormal3f(0.518937, -0.508957, -0.686758);
  glVertex3f(1.310660, -1.310660, -0.353553);
  glNormal3f(0.558031, 0.518876, -0.647542);
  glVertex3f(1.633730, 0.131893, -0.312783);
  glNormal3f(0.769066, 0.581225, -0.265877);
  glVertex3f(1.759076, 0.138848, 0.072641);
  glNormal3f(0.947203, -0.056154, -0.315622);
  glVertex3f(1.949553, -0.351796, 0.080904);
  glNormal3f(0.727592, -0.012146, -0.685873);
  glVertex3f(1.810635, -0.326354, -0.348362);
  glNormal3f(0.304453, 0.720450, -0.623066);
  glVertex3f(0.840182, 0.662488, -0.200356);
  glNormal3f(0.444075, 0.863430, -0.239296);
  glVertex3f(0.904643, 0.701425, 0.046531);
  glNormal3f(0.769066, 0.581225, -0.265877);
  glVertex3f(1.759076, 0.138848, 0.072641);
  glNormal3f(0.558031, 0.518876, -0.647542);
  glVertex3f(1.633730, 0.131893, -0.312783);
  glNormal3f(0.113712, 0.746147, -0.655965);
  glVertex3f(0.127486, 0.928963, -0.138735);
  glNormal3f(0.167333, 0.943266, -0.286752);
  glVertex3f(0.137267, 0.983562, 0.032220);
  glNormal3f(0.444075, 0.863430, -0.239296);
  glVertex3f(0.904643, 0.701425, 0.046531);
  glNormal3f(0.304453, 0.720450, -0.623066);
  glVertex3f(0.840182, 0.662488, -0.200356);
  glNormal3f(-0.113712, 0.746147, -0.655965);
  glVertex3f(-0.127486, 0.928963, -0.138735);
  glNormal3f(-0.167333, 0.943266, -0.286752);
  glVertex3f(-0.137267, 0.983562, 0.032220);
  glNormal3f(0.167333, 0.943266, -0.286752);
  glVertex3f(0.137267, 0.983562, 0.032220);
  glNormal3f(0.113712, 0.746147, -0.655965);
  glVertex3f(0.127486, 0.928963, -0.138735);
  glNormal3f(-0.304453, 0.720450, -0.623066);
  glVertex3f(-0.840181, 0.662488, -0.200356);
  glNormal3f(-0.444075, 0.863430, -0.239296);
  glVertex3f(-0.904643, 0.701425, 0.046531);
  glNormal3f(-0.167333, 0.943266, -0.286752);
  glVertex3f(-0.137267, 0.983562, 0.032220);
  glNormal3f(-0.113712, 0.746147, -0.655965);
  glVertex3f(-0.127486, 0.928963, -0.138735);
  glNormal3f(-0.558031, 0.518876, -0.647542);
  glVertex3f(-1.633730, 0.131893, -0.312783);
  glNormal3f(-0.769066, 0.581225, -0.265877);
  glVertex3f(-1.759076, 0.138848, 0.072641);
  glNormal3f(-0.444075, 0.863430, -0.239296);
  glVertex3f(-0.904643, 0.701425, 0.046531);
  glNormal3f(-0.304453, 0.720450, -0.623066);
  glVertex3f(-0.840181, 0.662488, -0.200356);
  glNormal3f(-0.727592, -0.012146, -0.685873);
  glVertex3f(-1.810635, -0.326355, -0.348362);
  glNormal3f(-0.947203, -0.056154, -0.315622);
  glVertex3f(-1.949553, -0.351797, 0.080904);
  glNormal3f(-0.769066, 0.581225, -0.265877);
  glVertex3f(-1.759076, 0.138848, 0.072641);
  glNormal3f(-0.558031, 0.518876, -0.647542);
  glVertex3f(-1.633730, 0.131893, -0.312783);
  glNormal3f(0.467910, 0.214881, -0.857234);
  glVertex3f(-0.573185, -0.299397, -0.071357);
  glNormal3f(0.060030, 0.054018, -0.996704);
  glVertex3f(-0.976614, -0.924653, -0.483356);
  glNormal3f(0.046297, 0.072298, -0.996277);
  glVertex3f(-1.315161, -0.214595, -0.455109);
  glNormal3f(0.496933, -0.018708, -0.867580);
  glVertex3f(-0.612688, 0.003778, -0.051979);
  glNormal3f(-0.496933, -0.018708, -0.867580);
  glVertex3f(0.612688, 0.003778, -0.051979);
  glNormal3f(-0.046297, 0.072298, -0.996277);
  glVertex3f(1.315161, -0.214595, -0.455109);
  glNormal3f(-0.060030, 0.054018, -0.996704);
  glVertex3f(0.976615, -0.924653, -0.483356);
  glNormal3f(-0.467910, 0.214881, -0.857234);
  glVertex3f(0.573185, -0.299397, -0.071357);
  glNormal3f(-0.481216, -0.269417, -0.834162);
  glVertex3f(0.516843, 0.114116, -0.043716);
  glNormal3f(-0.128941, 0.124577, -0.983764);
  glVertex3f(1.179837, 0.115097, -0.405219);
  glNormal3f(-0.046297, 0.072298, -0.996277);
  glVertex3f(1.315161, -0.214595, -0.455109);
  glNormal3f(-0.496933, -0.018708, -0.867580);
  glVertex3f(0.612688, 0.003778, -0.051979);
  glNormal3f(-0.415906, -0.486953, -0.768029);
  glVertex3f(0.318284, 0.429945, -0.035778);
  glNormal3f(-0.191748, 0.020295, -0.981201);
  glVertex3f(0.616718, 0.543203, -0.268538);
  glNormal3f(-0.128941, 0.124577, -0.983764);
  glVertex3f(1.179837, 0.115097, -0.405219);
  glNormal3f(-0.481216, -0.269417, -0.834162);
  glVertex3f(0.516843, 0.114116, -0.043716);
  glNormal3f(-0.196387, -0.662954, -0.722434);
  glVertex3f(0.065110, 0.602883, -0.031909);
  glNormal3f(-0.089206, -0.129185, -0.987579);
  glVertex3f(0.096770, 0.761698, -0.194180);
  glNormal3f(-0.191748, 0.020295, -0.981201);
  glVertex3f(0.616718, 0.543203, -0.268538);
  glNormal3f(-0.415906, -0.486953, -0.768029);
  glVertex3f(0.318284, 0.429945, -0.035778);
  glNormal3f(0.196387, -0.662954, -0.722434);
  glVertex3f(-0.065110, 0.602883, -0.031909);
  glNormal3f(0.089206, -0.129185, -0.987579);
  glVertex3f(-0.096770, 0.761698, -0.194180);
  glNormal3f(-0.089206, -0.129185, -0.987579);
  glVertex3f(0.096770, 0.761698, -0.194180);
  glNormal3f(-0.196387, -0.662954, -0.722434);
  glVertex3f(0.065110, 0.602883, -0.031909);
  glNormal3f(0.415906, -0.486953, -0.768029);
  glVertex3f(-0.318285, 0.429945, -0.035778);
  glNormal3f(0.191748, 0.020295, -0.981201);
  glVertex3f(-0.616718, 0.543204, -0.268538);
  glNormal3f(0.089206, -0.129185, -0.987579);
  glVertex3f(-0.096770, 0.761698, -0.194180);
  glNormal3f(0.196387, -0.662954, -0.722434);
  glVertex3f(-0.065110, 0.602883, -0.031909);
  glNormal3f(0.481216, -0.269417, -0.834162);
  glVertex3f(-0.516843, 0.114116, -0.043716);
  glNormal3f(0.128941, 0.124577, -0.983764);
  glVertex3f(-1.179837, 0.115096, -0.405219);
  glNormal3f(0.191748, 0.020295, -0.981201);
  glVertex3f(-0.616718, 0.543204, -0.268538);
  glNormal3f(0.415906, -0.486953, -0.768029);
  glVertex3f(-0.318285, 0.429945, -0.035778);
  glNormal3f(0.496933, -0.018708, -0.867580);
  glVertex3f(-0.612688, 0.003778, -0.051979);
  glNormal3f(0.046297, 0.072298, -0.996277);
  glVertex3f(-1.315161, -0.214595, -0.455109);
  glNormal3f(0.128941, 0.124577, -0.983764);
  glVertex3f(-1.179837, 0.115096, -0.405219);
  glNormal3f(0.481216, -0.269417, -0.834162);
  glVertex3f(-0.516843, 0.114116, -0.043716);
  glNormal3f(0.060030, 0.054018, -0.996704);
  glVertex3f(-0.976614, -0.924653, -0.483356);
  glNormal3f(-0.518937, -0.508957, -0.686758);
  glVertex3f(-1.310660, -1.310660, -0.353553);
  glNormal3f(-0.727592, -0.012146, -0.685873);
  glVertex3f(-1.810635, -0.326355, -0.348362);
  glNormal3f(0.046297, 0.072298, -0.996277);
  glVertex3f(-1.315161, -0.214595, -0.455109);
  glNormal3f(-0.046297, 0.072298, -0.996277);
  glVertex3f(1.315161, -0.214595, -0.455109);
  glNormal3f(0.727592, -0.012146, -0.685873);
  glVertex3f(1.810635, -0.326354, -0.348362);
  glNormal3f(0.518937, -0.508957, -0.686758);
  glVertex3f(1.310660, -1.310660, -0.353553);
  glNormal3f(-0.060030, 0.054018, -0.996704);
  glVertex3f(0.976615, -0.924653, -0.483356);
  glNormal3f(-0.128941, 0.124577, -0.983764);
  glVertex3f(1.179837, 0.115097, -0.405219);
  glNormal3f(0.558031, 0.518876, -0.647542);
  glVertex3f(1.633730, 0.131893, -0.312783);
  glNormal3f(0.727592, -0.012146, -0.685873);
  glVertex3f(1.810635, -0.326354, -0.348362);
  glNormal3f(-0.046297, 0.072298, -0.996277);
  glVertex3f(1.315161, -0.214595, -0.455109);
  glNormal3f(-0.191748, 0.020295, -0.981201);
  glVertex3f(0.616718, 0.543203, -0.268538);
  glNormal3f(0.304453, 0.720450, -0.623066);
  glVertex3f(0.840182, 0.662488, -0.200356);
  glNormal3f(0.558031, 0.518876, -0.647542);
  glVertex3f(1.633730, 0.131893, -0.312783);
  glNormal3f(-0.128941, 0.124577, -0.983764);
  glVertex3f(1.179837, 0.115097, -0.405219);
  glNormal3f(-0.089206, -0.129185, -0.987579);
  glVertex3f(0.096770, 0.761698, -0.194180);
  glNormal3f(0.113712, 0.746147, -0.655965);
  glVertex3f(0.127486, 0.928963, -0.138735);
  glNormal3f(0.304453, 0.720450, -0.623066);
  glVertex3f(0.840182, 0.662488, -0.200356);
  glNormal3f(-0.191748, 0.020295, -0.981201);
  glVertex3f(0.616718, 0.543203, -0.268538);
  glNormal3f(0.089206, -0.129185, -0.987579);
  glVertex3f(-0.096770, 0.761698, -0.194180);
  glNormal3f(-0.113712, 0.746147, -0.655965);
  glVertex3f(-0.127486, 0.928963, -0.138735);
  glNormal3f(0.113712, 0.746147, -0.655965);
  glVertex3f(0.127486, 0.928963, -0.138735);
  glNormal3f(-0.089206, -0.129185, -0.987579);
  glVertex3f(0.096770, 0.761698, -0.194180);
  glNormal3f(0.191748, 0.020295, -0.981201);
  glVertex3f(-0.616718, 0.543204, -0.268538);
  glNormal3f(-0.304453, 0.720450, -0.623066);
  glVertex3f(-0.840181, 0.662488, -0.200356);
  glNormal3f(-0.113712, 0.746147, -0.655965);
  glVertex3f(-0.127486, 0.928963, -0.138735);
  glNormal3f(0.089206, -0.129185, -0.987579);
  glVertex3f(-0.096770, 0.761698, -0.194180);
  glNormal3f(0.128941, 0.124577, -0.983764);
  glVertex3f(-1.179837, 0.115096, -0.405219);
  glNormal3f(-0.558031, 0.518876, -0.647542);
  glVertex3f(-1.633730, 0.131893, -0.312783);
  glNormal3f(-0.304453, 0.720450, -0.623066);
  glVertex3f(-0.840181, 0.662488, -0.200356);
  glNormal3f(0.191748, 0.020295, -0.981201);
  glVertex3f(-0.616718, 0.543204, -0.268538);
  glNormal3f(0.046297, 0.072298, -0.996277);
  glVertex3f(-1.315161, -0.214595, -0.455109);
  glNormal3f(-0.727592, -0.012146, -0.685873);
  glVertex3f(-1.810635, -0.326355, -0.348362);
  glNormal3f(-0.558031, 0.518876, -0.647542);
  glVertex3f(-1.633730, 0.131893, -0.312783);
  glNormal3f(0.128941, 0.124577, -0.983764);
  glVertex3f(-1.179837, 0.115096, -0.405219);
glEnd();


glEndList();

}

Enemy::~Enemy() {
   // do nothing
}




float
Enemy::NearestApproachTime(Enemy *other)
{
    // imagine we are at the origin with no velocity,
    // compute the relative velocity of the other vehicle
    const vector3 myVelocity = velocity;
    const vector3 otherVelocity = other->getVelocity();
    const vector3 relVelocity = otherVelocity - myVelocity;
    const float relSpeed = relVelocity.length();

    // Now consider the path of the other vehicle in this relative
    // space, a line defined by the relative position and velocity.
    // The distance from the origin (our vehicle) to that line is
    // the nearest approach.

    // Take the unit tangent along the other vehicle's path
    const vector3 relTangent = relVelocity / relSpeed;

    // find distance from its path to origin (compute offset from
    // other to us, find length of projection onto path)
    const vector3 relPosition = position - other->getPosition();
    const float projection = relTangent * (relPosition);

    return projection / relSpeed;
}


// Given the time until nearest approach (predictNearestApproachTime)
// determine position of each vehicle at that time, and the distance
// between them


float
Enemy::NearestApproachPositions (Enemy *other, float time) {

    const vector3    myTravel =       velocity * time;
    const vector3 otherTravel = other->getVelocity() * time;

    const vector3    myFinal =       position  +    myTravel;
    const vector3 otherFinal = other->getPosition () + otherTravel;

    const vector3 distance = myFinal - otherFinal;

    return distance.length();
}




void Enemy::action(float dt) {

/*
   flags = 0;
   if(collide(player, dt)) {
      std::cout << position << " " << hit_position << " " << hit_normal << " " << hit_time << " " << std::endl;
   }
*/
/*
   if(flags & ACT_COLLISION) {
      life--;
      if(life < 0)
         flags |= ACT_REMOVE;
   }
 */  


   float size = 200.0;

   force = vector3(0,0,0);

   if(position.x-radius < -size) {
      force += mass*vector3(5, 0, 0) / dt;
   }
   if(position.x+radius > size) {
      force += mass*vector3(-5, 0, 0) / dt;
   }

   if(position.y-radius < -size) {
      force += mass*vector3(0, 5,  0) / dt;
   }
   if(position.y+radius > size) {
      force += mass*vector3(0, -5,  0) / dt;
   }

   //force += mass * vector3(0, -5.0f, 0);

}



void Enemy::render() {


   float green[] = { 0.5, 0.8, 1.0, 1.0 };
   float red[] = { 0.9, 0.3, 0.4, 1.0 };
   float white[] = { 1.0, 1.0, 1.0, 1.0 };

   float n = grid_list.size()/4.0;

   glDisable(GL_LIGHTING);

//   glEnable(GL_BLEND);
//   glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);

   //printf("speed %f alpha %f\n", speed, (max_speed-speed)/max_speed);
//   glColor4f(pain.x, pain.y, pain.z, fabs(0.25-speed)/0.25);

/*
   if(flags & ACT_COLLISION) {
      assert(hit_actor != 0);
      vector3 other = hit_actor->getPosition();

      glBegin(GL_LINES);
       glColor4f(0.0, 1.0, 0.0, 1.0);
       glVertex3f(other.x, other.y, other.z);
       glVertex3f(position.x, position.y, position.z);
      glEnd();

      glColor4f(1.0*n, 0.0, 0.0, 1.0);
   }
   else {
      glColor4f(1.0*n, 1.0*n, 0.0, 1.0);
   }

*/
   glPushMatrix();
   glTranslatef(position.x, position.y, position.z);
/*
   glBegin(GL_LINES);
    glColor4f(1.0, 1.0, 1.0, 1.0);
    glVertex3f(0.0, 0.0, 0.0);
    glVertex3f(velocity.x, velocity.y, velocity.z);
   glEnd();
*/
   glCallList(dl_enemy);

/*
   glBegin(GL_TRIANGLE_FAN);
    for(int i=0; i<12; i++) {
       float x = radius*cos(i/12.0*2.0*M_PI);
       float y = radius*sin(i/12.0*2.0*M_PI);
       glVertex3f(x, y, 0.0);
    }
   glEnd();
*/
  glPopMatrix();

   glDisable(GL_BLEND);
   glEnable(GL_LIGHTING);
}

#if 0

void Enemy::action(float dt) {

   static int total_collisions = 0;

   tt = dt;

   //float pd = degToRad(uniform_random_float(0.0, 360.0));
   //target_pos = player->getPosition()+vector3(cos(pd), sin(pd), 0.0) * 2.0;

   if(delay <= 0.0) {


    steering = vector3(0,0,0);

    // otherwise, go on to consider potential future collisions
    float steer = 0;
    Enemy* threat = 0;

    // Time (in seconds) until the most immediate collision threat found
    // so far.  Initial value is a threshold: don't look more than this
    // many frames into the future.
    float minTime = look_ahead;

    // for each of the other vehicles, determine which (if any)
    // pose the most immediate threat of collision.
    ActorList al = ActorManager::getInstance()->get_actor_type_list(ACT_ENEMY);

    int hit = 0;

    for(int i=0; i<al.size(); i++) {

       Enemy *other = (Enemy *)al[i];
       if(other != this) {

          vector3 dist = position - other->getPosition();

          float d = dist.length();

          if(d <= 1.0*2) {

             float proj =  !velocity * dist;
             vector3 st = proj * !velocity;

             if(velocity.length() <= tiny)
                st = !dist;

             steering += st;

             hit++;
          
             //std::cout << "me p " << position << " him p " << other->getPosition() << 
             //     "me v " << velocity << " him v " << other->getVelocity() <<
             //     "dir " << dist << " dist " << d << " steer " << steering << std::endl;
/*
             pain.z -= (1.0f/255.0f);

             if(pain.z < 0.0f) {
                pain.z = 0.0f;
                pain.y -= (1.0f/255.0f);
                if(pain.y < 0.0f) {
                   pain.y = 0.0f;
                   pain.x -= (1.0f/255.0f);
                   if(pain.x < 0.0f) {
                      pain.set(1.0f,1.0f,1.0f);
                   }
                }
             } 
*/
             break;


          }
       }
    }

total_collisions += hit;



if(hit==0) {

   float t = 0.0;

   vector3 dist = position - target_pos;

   t = dist.length();

   if(t <= 1.0)
      target_pos = vector3( uniform_random_float(-40.0, 20.0), uniform_random_float(-20.0, 20.0), -10.0 );
   //target_pos = player->getPosition() + player->getVelocity() * dt * t;
 
   //std::cout << "target = " << target_pos << std::endl;

   target_dir = !(target_pos - position);

   vector3 dv = target_dir * max_speed;

   steering = dv - velocity;


    //al = ActorManager::getInstance()->get_actor_type_list(ACT_ENEMY);

    for(int i=0; i<al.size(); i++) {

        Enemy *other = (Enemy *)al[i];
        if (other != this)
        {	
            // avoid when future positions are this close (or less)
            const float collisionDangerThreshold = 1.0 * 2;

            // predicted time until nearest approach of "this" and "other"
            const float time = NearestApproachTime (other);

            // If the time is in the future, sooner than any other
            // threatened collision...
            if ((time >= 0) && (time < minTime))
            {
                // if the two will be close enough to collide,
                // make a note of it
                if (NearestApproachPositions (other, time)
                    < collisionDangerThreshold)
                {
                    minTime = time;
                    threat = other;
                }
            }
        }
    }

    // if a potential collision was found, compute steering to avoid
    if (threat != 0)
    {

       vector3 up(0,0,-1);
       vector3 forward = !velocity;
       vector3 side = forward % up;
       up = forward % side;  

float brake = 0;
float accel = 0;

        // parallel: +1, perpendicular: 0, anti-parallel: -1
        float parallelness = (!velocity) * (!threat->getVelocity());
        float angle = 0.707f;

        if (parallelness < -angle)
        {
            // anti-parallel "head on" paths:
            // steer away from future threat position
            vector3 threat_pos = threat->getPosition() + threat->getVelocity() * minTime;
            vector3 offset = threat_pos - position;
            float sideDot = offset * (side);
            steer = (sideDot > 0) ? -1 : 1;
            //brake = 1;
            // scale steer by inverse distance...
            //steer *= 10/(offset.length()+0.1);
        }
        else
        {
            if (parallelness > angle)
            {
                // parallel paths: steer away from threat
                vector3 offset = threat->getPosition() - position;
                float sideDot = offset * side;
                steer = (sideDot > 0) ? -1 : 1;
                //accel = 1.0;
            }
            else
            {
                // perpendicular paths: steer behind threat
                // (only the slower of the two does this)

                if ((threat->getVelocity()).length() <= velocity.length())
                {
                    float sideDot = side * threat->getVelocity();
                    steer = (sideDot > 0) ? -1 : 1;
                }
            }
        }

    steering = side * steer + -forward * brake + forward*accel;
    }

}




/*


    ActorList al = ActorManager::getInstance()->get_actor_type_list(ACT_ENEMY);

    bool hit = false;
   float min_coll = look_ahead;

    for(int i=0; i<al.size(); i++) {
 
       if(al[i]->getId() != actor_id) {


   vector3 A, B;
   float a, b;


   if(LineLineIntersect(al[i]->getPosition(), al[i]->getPosition()+al[i]->getVelocity()*look_ahead,
                        position, position+velocity*look_ahead,
                        A, B, a, b)) {

      if( (a >= zero && a <= one) && (b >= zero && b <= one)) {
         vector3 dist = B-A;
         float d = dist.length();

         if(d <= 2.0 && b < min_coll) {
            // collision will happen in look_ahead seconds.
            target_pos = A;
            if(d < tiny)
               target_dir = !(position - al[i]->getPosition());
            else 
               target_dir = B-A;
            min_coll = b;
              hit = true;
         }
      }

    }

   vector3 d = al[i]->getPosition() - position;
     if(d.length() <= 2.0) {
      hit = true;
      target_pos = al[i]->getPosition();
   }

} 

  }

   if(hit) {
 
   //std::cout << "target = " << target_pos << std::endl;
            std::cout << "may hit!\n";

   //target_dir = !(position - target_pos);

   vector3 dv = target_dir * max_speed;

   steering = dv - velocity;
}
*/


   force = mass * (steering / dt);

   delay = 0.0; //0.25;
   }
}





void Enemy::render() {


   float green[] = { 0.5, 0.8, 1.0, 1.0 };
   float red[] = { 0.9, 0.3, 0.4, 1.0 };
   float white[] = { 1.0, 1.0, 1.0, 1.0 };

   glPushMatrix();
   glTranslatef(position.x, position.y, position.z);

   glDisable(GL_LIGHTING);
   glBegin(GL_LINES);
    glColor4f(0.0, 1.0, 1.0, 1.0);
    glVertex3f(0.0, 0.0, 0.0);
    glVertex3f(velocity.x, velocity.y, velocity.z);
//    glColor4f(1.0, 1.0, 0.0, 1.0);
//    glVertex3f(0.0, 0.0, 0.0);
//    glVertex3f(velocity.x, velocity.y, velocity.z);
//    glColor4f(0.0, 1.0, 0.0, 1.0);
//    glVertex3f(0.0, 0.0, 0.0);
//    glVertex3f(steering.x, steering.y, steering.z);

    glEnd();

   glColor4f(pain.x, pain.y, pain.z, 1.0);
   //glBegin(GL_TRIANGLE_FAN);
   glBegin(GL_LINE_LOOP);
    for(int i=0; i<12; i++) {
       float x = cos(i/12.0*2.0*M_PI);
       float y = sin(i/12.0*2.0*M_PI);
       glVertex3f(x, y, 0.0);
    }
   glEnd();

   vector3 A, B;
   float a, b;

  glPopMatrix();


   glPushMatrix();
   glTranslatef(target_pos.x, target_pos.y, target_pos.z);
   glBegin(GL_TRIANGLE_FAN);
    for(int i=0; i<12; i++) {
       float x = 0.5*cos(i/12.0*2.0*M_PI);
       float y = 0.5*sin(i/12.0*2.0*M_PI);
       glVertex3f(x, y, 0.0);
    }
   glEnd();
   glPopMatrix();


   glBegin(GL_LINES);
    glColor4f(0.0, 0.0, 1.0, 1.0);
    glVertex3f(position.x, position.y, position.z);
    glVertex3f(target_pos.x, target_pos.y, target_pos.z);
   glEnd();

   glEnable(GL_LIGHTING);


/*
   glPushMatrix();
   glTranslatef(position.x, position.y, position.z);
//   glPushMatrix();
//   vector3 axis = rot.getAxis();
//   float angle = rot.getAngle();

   //sgQuatToAngleAxis(&angle, axis, rot);
   //glScalef(0.2, 0.2, 0.2);
   glScalef(0.5, 0.5, 0.5);
//   glRotatef(-90, 0.0, 0.0, 1.0);
   float f = vector3(0.0, 1.0, 0.0) * !velocity;
 f = (float)(acos((f>=1.0f)?1.0f:(f<=-1.0f)?-1.0f:f)) ;

   glRotatef(f*180.0/M_PI, 0.0, 0.0, 1.0);

   glCallList(dl_enemy);

  glPopMatrix();
*/
}

#endif
